import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import React, {useState, useEffect } from 'react';
import { HuggingFaceModel } from '@/proxies/huggingface';
import { OpenAIModel } from '@/proxies/openai';

export default function Home() {
  const [conversation, setConversation] = useState<Array<string>>([]);
  const [chatboxDisabled, setChatboxDisabled] = useState<boolean>(false);
  const [response, setResponse] = useState<string>('');
  const [query, setQuery] = useState<string>('');
  const [currentModel, setCurrentModel] = useState<string>(OpenAIModel.gpt35)
  const [currentPrompt, setCurrentPrompt] = useState<string>('none')
  const [currentData, setCurrentData] = useState<string>('none')
  const [currentHumanEmoji, setCurrentHumanEmoji] = useState<string>('üë®‚Äçüíª')
  const [currentRobotEmoji, setCurrentRobotEmoji] = useState<string>('ü§ñ')

  const getAvailableModels = () => {
    return [
      OpenAIModel.ada,
      OpenAIModel.curie,
      OpenAIModel.davinci,
      OpenAIModel.gpt35,
      OpenAIModel.gpt4,
      HuggingFaceModel.biogpt,
      HuggingFaceModel.gpt2,
      HuggingFaceModel.bigscience_bloom
    ]
  }

  const getAvailablePrompts = (model: string) => {
    switch(model) {
      case HuggingFaceModel.biogpt:
        return ["q-and-a"]
      default:
        return ["none", "corpo-finder", "bing-stoned", "very-safe"]
    }
  }

  const getPromptName = (prompt: string) => {
    switch(prompt) {
      case "bing-normal":
        return "Bing";
      case "bing-stoned":
        return "Bing (stoned)";
      case "corpo-finder":
        return "CorpoFinder‚Ñ¢";
      case "very-safe":
        return "Very Safe Mode";
      case "q-and-a":
        return "Q and A";
      default:
        return prompt;
    }
  }

  const getModelName = (model: string) => {
    return model;
  }

  const changeModel = (model: string) => {
    setCurrentModel(model);
    setCurrentPrompt(getAvailablePrompts(model)[0]);
  }

  useEffect(() => {
    if(response) {
      setConversation([...conversation, response])
      setChatboxDisabled(false)
      setResponse('')
      console.log({conversation});
    }
  }, [response])

  useEffect(() => {
    if(query) {
      getResponse().then(json => {
        console.log(json)
        if(json.response)
          setResponse(json.response);
        else if(json.error && JSON.stringify(json.error) !== '{}')
          alert(JSON.stringify(json.error))
        else
          alert("something went wrong but IDK what ü§∑‚Äç‚ôÇÔ∏è try refreshing");
        setQuery('')
      }).catch(err => {
        alert(err);
      })
    }
  }, [query])

  const appendToConversation = async (query: string) => {
    console.log(query);
    setConversation([...conversation, query]);
    setQuery(query);
  }

  const getResponse = async () => {
    const response = await fetch('/api/get-response', {
      method: 'POST',
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ conversation, currentModel, currentPrompt })
    })
    return (await response.json())
  }

  const fixNewlines = (s: string) => {
    return s.split('\n').map((ss,i) => <p key={'p'+i} className={styles.chatparagraph}>{ss}</p>)
  }

  return (
    <>
      <Head>
        <title>Chat: {currentModel}, {currentPrompt}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <div className={styles.sidebar}>
          <ModelSelector currentModel={currentModel} setCurrentModel={changeModel} getAvailableModels={getAvailableModels} 
            getModelName={getModelName}/>
          <PromptSelector currentModel={currentModel} currentPrompt={currentPrompt} setCurrentPrompt={setCurrentPrompt} 
            getAvailablePrompts={getAvailablePrompts} getPromptName={getPromptName}/>
          <DataSelector currentData={currentData} setCurrentData={setCurrentData}/>
          <br></br>
          <HumanEmojiSelector currentHumanEmoji={currentHumanEmoji} setCurrentHumanEmoji={setCurrentHumanEmoji}/>
          <RobotEmojiSelector currentRobotEmoji={currentRobotEmoji} setCurrentRobotEmoji={setCurrentRobotEmoji}/>
        </div>
      <main className={styles.main}>
        <div className={styles.description}>
          {conversation.map((item,i) => 
            <div className={[i % 2 == 0 ? styles.human: styles.robot, styles.chatcontainer].join(" ")} key={i}>
              {i%2==0? <>
                <p className={styles.chatlabel}>{currentHumanEmoji}</p>
              </> : <> 
                <p className={styles.chatlabel}>{currentRobotEmoji}</p>
              </>}
              <div className={styles.chattext}>{fixNewlines(item)}</div>
            </div>
          )}
        </div>
      </main>
      <div className={styles.chatbox}>
        <ChatBox addToList={appendToConversation} disabled={chatboxDisabled} setDisabled={setChatboxDisabled} />
      </div>
    </>
  )
}

const ModelSelector = ({ currentModel, setCurrentModel, getAvailableModels, getModelName }: 
    { currentModel:string, setCurrentModel:any, getAvailableModels: any, getModelName: any }) => {
  // allows user to select between four named models

  const handleModelClicked = (model: string) => {
    console.log(model);
    setCurrentModel(model);
  }
  return (
    <div className={styles.selectorcontainer}>
      <h3>Select model</h3>
      {getAvailableModels().map((model: string) => {
        return <p key={`${model}-model`} onClick={() => handleModelClicked(model)} className={`${styles.selector} 
          ${currentModel===model ? styles.selected : ''}`}>
            {getModelName(model)}
        </p>
      })}
    </div>
  )
}

const PromptSelector = ({ currentModel, currentPrompt, setCurrentPrompt, getAvailablePrompts, getPromptName }: 
  {currentModel:string, currentPrompt:string, setCurrentPrompt:any, getAvailablePrompts:any, getPromptName: any }) => {
  // allows user to select between four named models

  const handlePromptClicked = (model: string) => {
    console.log(model);
    setCurrentPrompt(model);
  }
  const availablePrompts = getAvailablePrompts(currentModel);
  console.log({availablePrompts});
  return (
    <div className={styles.selectorcontainer}>
      <h3>Select prompt</h3>
      {availablePrompts.map((prompt: string) => {
        return <p key={`${prompt}-prompt`} onClick={() => handlePromptClicked(prompt)} className={`${styles.selector} ${currentPrompt===prompt ? styles.selected : ''}`}>
          {getPromptName(prompt)}
        </p>
      })}
    </div>
  )
}

const DataSelector = ({ currentData, setCurrentData}: {currentData:string, setCurrentData:any}) => {
  // allows user to select between four named models

  const handleDataClicked = (model: string) => {
    console.log(model);
    setCurrentData(model);
  }
  return (
    <div className={styles.selectorcontainer}>
      <h3>Select data</h3>
      <p onClick={() => handleDataClicked("none")} className={`${styles.selector} ${currentData==="none" ? styles.selected : ''}`}>none</p>
      <p className={styles.disabled}>Kagi search</p>
    </div>
  )
}

const HumanEmojiSelector = ({ currentHumanEmoji, setCurrentHumanEmoji}: {currentHumanEmoji:string, setCurrentHumanEmoji:any}) => {
  // allows user to select between four named models

  const handleDataClicked = (model: string) => {
    console.log(model);
    setCurrentHumanEmoji(model);
  }
  return (
    <div className={styles.selectorcontainer}>
      <h3 onClick={() => handleDataClicked("üë®‚Äçüíª")} className={`${styles.selector} ${currentHumanEmoji==="üë®‚Äçüíª" ? styles.selected : ''}`}>üë®‚Äçüíª</h3>
      <h3 onClick={() => handleDataClicked("üåé")} className={`${styles.selector} ${currentHumanEmoji==="üåé" ? styles.selected : ''}`}>üåé</h3>
    </div>
  )
}

const RobotEmojiSelector = ({ currentRobotEmoji, setCurrentRobotEmoji}: {currentRobotEmoji:string, setCurrentRobotEmoji:any}) => {
  // allows user to select between four named models

  const handleDataClicked = (model: string) => {
    console.log(model);
    setCurrentRobotEmoji(model);
  }
  return (
    <div className={styles.selectorcontainer}>
      <h3 onClick={() => handleDataClicked("ü§ñ")} className={`${styles.selector} ${currentRobotEmoji==="ü§ñ" ? styles.selected : ''}`}>ü§ñ</h3>
      <h3 onClick={() => handleDataClicked("üëÅ")} className={`${styles.selector} ${currentRobotEmoji==="üëÅ" ? styles.selected : ''}`}>üëÅ</h3>
    </div>
  )
}

const ChatBox = ({ addToList, disabled, setDisabled }: {addToList: any, disabled: boolean, setDisabled: any}) => {
  const [message, setMessage] = useState('');

  const handleKeyDown = (e: any) => {
    const keyCode = e.keyCode;
    if(keyCode === 13 && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  }
  const handleChange = (e: any) => {
    setMessage(e.target.value);
  };

  const handleSubmit = (e: any) => {
    e.preventDefault();
    addToList(message);
    setMessage('');
    setDisabled(true);
  };

  return (
    <form onSubmit={handleSubmit}>
      <fieldset>
        <textarea value={message} onChange={handleChange} onKeyDown={handleKeyDown}/>
        {/* <button type="submit" disabled={disabled}>Send</button> */}
      </fieldset>
    </form>
  );
};